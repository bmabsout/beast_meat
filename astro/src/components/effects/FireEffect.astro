---
// Import the noise texture
import noiseTexture from '../../assets/rgba_noise_medium.png';
---

<div id="fire-container" class="absolute inset-0 z-[5] pointer-events-none">
  <!-- The Three.js canvas will be inserted here by the script -->
</div>

<script is:inline define:vars={{ noiseTextureUrl: noiseTexture.src }} type="module">
  // Import Three.js from CDN
  import * as THREE from 'https://cdn.jsdelivr.net/npm/three@0.174.0/build/three.module.js';

  // Execute immediately
  const container = document.getElementById('fire-container');
  if (!container) {
    console.error('Fire container not found');
  } else {
    // Create scene, camera, and renderer
    const scene = new THREE.Scene();
    
    // Performance settings - adjust these to balance quality and performance
    const settings = {
      targetFPS: 30,            // Target framerate (lower = better battery life)
      useHighPrecision: true,   // Use high precision shaders (better quality but more GPU intensive)
      flowRate: 1.0,            // Speed of the fire animation
      opacity: 1.0              // Base opacity for the fire effect
    };
    
    // Use a camera that fills the entire view
    const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
    
    // Get the actual container dimensions
    const containerWidth = container.clientWidth;
    const containerHeight = container.clientHeight;
    
    // Create high-quality renderer with no downscaling
    const renderer = new THREE.WebGLRenderer({ 
      alpha: true,
      antialias: true,
      powerPreference: 'high-performance',
      precision: 'highp' // Use high precision for better quality
    });
    
    // Set renderer size to full container dimensions
    renderer.setPixelRatio(window.devicePixelRatio); // Use device pixel ratio
    renderer.setSize(containerWidth, containerHeight); // Use full container size
    
    // Configure canvas for maximum quality
    const canvas = renderer.domElement;
    canvas.style.position = 'absolute';
    canvas.style.left = '0';
    canvas.style.top = '0';
    canvas.style.width = '100%';
    canvas.style.height = '100%';
    canvas.style.imageRendering = 'auto'; // Let browser decide best rendering
    canvas.style.transform = 'translate3d(0,0,0)'; // Force GPU acceleration
    
    // Append to container
    container.appendChild(canvas);

    // Create shader material for fire effect
    const geometry = new THREE.PlaneGeometry(2, 2);
    const material = new THREE.ShaderMaterial({
      uniforms: {
        u_timeSeconds: { value: 0 },
        u_screenSize: { value: new THREE.Vector2(containerWidth * window.devicePixelRatio, containerHeight * window.devicePixelRatio) },
        u_flowRate: { value: settings.flowRate },
        opacity: { value: settings.opacity }
      },
      vertexShader: `
        varying vec2 vUv;
        void main() {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
        }
      `,
      fragmentShader: `
        // Uniforms
        uniform vec2 u_screenSize;
        uniform float u_timeSeconds;
        uniform float u_flowRate;
        uniform float opacity;
        
        // Varyings
        varying vec2 vUv;
        
        // FBM function
        float random(vec2 st) {
            return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
        }
        
        float noise(vec2 st) {
            vec2 i = floor(st);
            vec2 f = fract(st);
            vec2 u = f * f * (3.0 - 2.0 * f);
            return mix(
                mix(random(i + vec2(0.0, 0.0)), random(i + vec2(1.0, 0.0)), u.x),
                mix(random(i + vec2(0.0, 1.0)), random(i + vec2(1.0, 1.0)), u.x),
                u.y
            );
        }
        
        float fbm(vec2 st) {
            float value = 0.0;
            float amplitude = 0.5;
            float frequency = 0.0;
            // Reduced number of octaves for better performance
            for (int i = 0; i < 4; i++) { // Reduced from 6 to 4 for better performance
                value += amplitude * noise(st);
                st *= 1.7;
                // Slower amplitude falloff for thicker flames
                amplitude *= 0.4;
            }
            return value;
        }
        
        void main() {
            // Convert from vUv to gl_FragCoord equivalent
            vec2 scaledCoord = vUv;
            
            // Apply FBM coordinates - reduced x scale for wider flames
            vec2 fbmCoord = scaledCoord * vec2(5.0, 2.0); // Reduced from 10.0 to 5.0 for x
            fbmCoord += vec2(0.0, -u_timeSeconds * u_flowRate);
            
            // Calculate fire color with wider spread
            float fireIntensity = fbm(fbmCoord) * 4.0 * (1.0 - scaledCoord.y);
            
            // Add horizontal spread to make flames thicker
            float horizontalSpread = 0.8 - abs(scaledCoord.x - 0.5) * 1.2; // Center-weighted falloff
            horizontalSpread = max(0.0, horizontalSpread);
            
            // Combine for thicker flames
            fireIntensity = fireIntensity * (0.7 + horizontalSpread * 0.5);
            
            // Brighter, more saturated orange for better visibility
            vec3 color = fireIntensity * vec3(1.0, 0.4, 0.1);
            
            // Apply opacity with boost for thicker appearance
            float alpha = min(1.0, fireIntensity * opacity * 0.4);
            
            // Output final color with transparency
            gl_FragColor = vec4(color, alpha);
        }
      `,
      transparent: true,
      blending: THREE.AdditiveBlending
    });

    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);

    // Animation loop with frame limiting for better battery life
    let lastTime = 0;
    const frameInterval = 1000 / settings.targetFPS;
    let isAnimating = true; // Track if animation should be running
    
    function animate(currentTime) {
      // Only continue animation if we should be animating
      if (!isAnimating) return;
      
      requestAnimationFrame(animate);
      
      // Skip frames to hit target framerate
      const deltaTime = currentTime - lastTime;
      if (deltaTime < frameInterval) return;
      
      // Update time uniform for the shader
      material.uniforms.u_timeSeconds.value = currentTime * 0.001; // Convert to seconds
      
      // Render the scene
      renderer.render(scene, camera);
      
      lastTime = currentTime - (deltaTime % frameInterval);
    }
    
    // Start animation with actual timestamp
    animate(performance.now());

    // Handle window resize with high-quality settings
    function onResize() {
      // Get the actual container dimensions
      const containerWidth = container.clientWidth;
      const containerHeight = container.clientHeight;
      
      // Update renderer with full container dimensions
      renderer.setSize(containerWidth, containerHeight, false);
      
      // Update resolution uniform with pixel-ratio-adjusted dimensions
      const pixelRatio = window.devicePixelRatio;
      material.uniforms.u_screenSize.value.set(
        containerWidth * pixelRatio, 
        containerHeight * pixelRatio
      );
    }
    
    // Initial resize and add listener
    window.addEventListener('resize', onResize);
    onResize();
    
    // Add visibility change handling to pause animation when tab is not visible
    document.addEventListener('visibilitychange', () => {
      isAnimating = document.visibilityState === 'visible';
      if (isAnimating) {
        // Reset lastTime to avoid large time jumps when becoming visible again
        lastTime = performance.now();
        animate(lastTime);
      }
    });
    
    // Clean up on page navigation
    document.addEventListener('astro:before-swap', () => {
      isAnimating = false; // Stop animation
      window.removeEventListener('resize', onResize);
      renderer.dispose();
      material.dispose();
      geometry.dispose();
    });
  }
</script> 